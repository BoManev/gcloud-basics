name: Extraction Test

env:
  GCP_REGION: us-west2-docker.pkg.dev
  GCP_PROJECT: effective-sonar-425922-q5
  GCP_REGISTRY: quickstart-docker-repo
  IMAGE_NAME: quickstart-pr-${{ github.event.number }}

on:
  pull_request: 
    branches: 
      - master
    types: [opened, synchronize]


jobs:

  build_and_deploy:
    runs-on: ubuntu-latest
    permissions: 
      contents: read
      id-token: write

    outputs:
      service_url: ${{ steps.deploy.outputs.service_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: "Authenticate with Google Cloud"
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Build and push Image'
        run: gcloud builds submit . --tag ${{ env.GCP_REGION }}/${{ env.GCP_PROJECT }}/${{ env.GCP_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
      # Non-serving revisions do not consume any resources and are not billed. 
      - name: Deploy to Cloud Run
        id: "deploy"
        run: |
          OUTPUT=$(gcloud run deploy quickstart-app \
          --region us-west2 \
            --image ${{ env.GCP_REGION }}/${{ env.GCP_PROJECT }}/${{ env.GCP_REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --platform "managed" \
            --port 80 \
            --no-allow-unauthenticated \
            --format="value(status.url)" \
            --quiet)

          echo "service_url=$OUTPUT" >> $GITHUB_OUTPUT


  test:
    runs-on: ubuntu-latest
    permissions: 
      contents: read
      id-token: write
  
    needs: build_and_deploy
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

          
      - name: Test
        run: echo ${{ needs.build_and_deploy.outputs.service_url }}

      - id: "service_auth"
        name: "Authenticate with Google Cloud"
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_KEY }}'
          token_format: "id_token"
          id_token_audience: ${{ needs.build_and_deploy.outputs.service_url  }}
       
      - name: Setup python
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Check python dependecy cache
        id: setup_cache
        uses: actions/cache@v3
        with:
          path: venv
          key: pip-${{ steps.setup_python.outputs.python-version}}-${{ hashFiles('requirements-workflows.txt') }}

      - name: Install dependecies
        if: steps.setup_python.outputs.cache-hit != 'true'
        run: |
          if [ -d "venv" ]; then rm -rf venv; fi
          python3 -m venv venv
          venv/bin/python3 -m pip install -r requirements-workflows.txt
        
      - name: 
        env:
          ID_TOKEN: ${{ steps.service_auth.outputs.id_token }}
          SERVICE_URL: ${{ needs.build_and_deploy.outputs.service_url }}
        run: |
          PYTHONPATH="." venv/bin/python3 -u scripts/integration_test.py


